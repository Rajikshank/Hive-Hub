// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userType UserType?
  onboardingCompleted Boolean @default(false)
  Company Company?
  JobSeeker JobSeeker?
  stripeCustomerId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    savedJobPost SavedJobPost[]
}

enum UserType {
  Company
  JOB_SEEKER

}
 
model Company{

  id String @id @default(uuid())
  name String
  location String
  about String
  logo String 
  website String
  xAccount String?


  JobPost JobPost[]

  user User @relation(fields: [userId],references: [id])
  userId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model JobSeeker{
  id String @id @default(uuid())

  name String
  about String
  resume String
  ats_keywords String[] 
  

  user User @relation(fields: [userId],references: [id])
  userId String @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



  AppliedJobPost AppliedJobPost[]
}



model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
 

 model JobPost{
id String @id @default(uuid())
jobTitle String
employmentType String 
location String
salaryFrom Int
salaryTo Int
jobDescription String 
listingDuration Int
benefits  String[]
companyId String
SavedJobPost SavedJobPost[]

 


status JobPostStatus @default(DRAFT)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

Company Company? @relation(fields:[companyId],references: [id])



 
AppliedJobPost AppliedJobPost[]
}



 enum JobPostStatus {

  DRAFT
  ACTIVE
  EXPIRED
 }


model SavedJobPost {
  id     String @id @default(uuid())
  jobId  String
  userId String

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

 
 model AppliedJobPost {
  id     String @id @default(uuid())
  jobId  String
  jobSeekerid String

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobseeker JobSeeker    @relation(fields: [jobSeekerid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ATS_Score Int?
  status ApplicationStatus @default(PENDING)

  @@unique([jobSeekerid, jobId]) 
}

enum ApplicationStatus {
PENDING
ACCEPTED
REJECTED
}